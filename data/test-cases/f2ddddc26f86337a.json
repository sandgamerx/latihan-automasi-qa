{"uid":"f2ddddc26f86337a","name":"test_delete_post","fullName":"API.test_api_del#test_delete_post","historyId":"bedcfb41b0bdc30e9cec91afc60f38ac","time":{"start":1759821174988,"stop":1759821176419,"duration":1431},"description":"Tes untuk menghapus postingan dan memverifikasi bahwa ia sudah hilang.","descriptionHtml":"<p>Tes untuk menghapus postingan dan memverifikasi bahwa ia sudah hilang.</p>\n","status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"def test_delete_post():\n        \"\"\"Tes untuk menghapus postingan dan memverifikasi bahwa ia sudah hilang.\"\"\"\n    \n        # --- LANGKAH A: HAPUS POSTINGAN ---\n    \n        # 1. Tentukan URL dari data yang mau dihapus\n        url_delete = \"https://jsonplaceholder.typicode.com/posts/1\"\n    \n        # 2. Kirim permintaan DELETE\n        response_delete = requests.delete(url_delete)\n    \n        # 3. Verifikasi (Assertion)\n        # Status code untuk DELETE yang berhasil biasanya 200 (OK)\n        assert response_delete.status_code == 200\n        print(f\"\\nStatus Code DELETE: {response_delete.status_code} (OK)\")\n    \n        # Respons body dari DELETE biasanya kosong, menandakan data sudah dihapus\n        print(f\"Respons Body DELETE: {response_delete.json()}\")\n    \n    \n        # --- LANGKAH B: PASTIKAN DATA BENAR-BENAR HILANG ---\n    \n        print(\"\\nMemverifikasi bahwa data sudah tidak ada...\")\n        # 1. Kirim permintaan GET ke URL yang sama\n        response_get = requests.get(url_delete)\n    \n        # 2. Verifikasi (Assertion)\n        # Server HARUS merespons dengan 404 Not Found, ini bukti data sudah dihapus\n>       assert response_get.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\nAPI\\test_api_del.py:35: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Tes untuk menghapus postingan dan memverifikasi bahwa ia sudah hilang.","status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"def test_delete_post():\n        \"\"\"Tes untuk menghapus postingan dan memverifikasi bahwa ia sudah hilang.\"\"\"\n    \n        # --- LANGKAH A: HAPUS POSTINGAN ---\n    \n        # 1. Tentukan URL dari data yang mau dihapus\n        url_delete = \"https://jsonplaceholder.typicode.com/posts/1\"\n    \n        # 2. Kirim permintaan DELETE\n        response_delete = requests.delete(url_delete)\n    \n        # 3. Verifikasi (Assertion)\n        # Status code untuk DELETE yang berhasil biasanya 200 (OK)\n        assert response_delete.status_code == 200\n        print(f\"\\nStatus Code DELETE: {response_delete.status_code} (OK)\")\n    \n        # Respons body dari DELETE biasanya kosong, menandakan data sudah dihapus\n        print(f\"Respons Body DELETE: {response_delete.json()}\")\n    \n    \n        # --- LANGKAH B: PASTIKAN DATA BENAR-BENAR HILANG ---\n    \n        print(\"\\nMemverifikasi bahwa data sudah tidak ada...\")\n        # 1. Kirim permintaan GET ke URL yang sama\n        response_get = requests.get(url_delete)\n    \n        # 2. Verifikasi (Assertion)\n        # Server HARUS merespons dengan 404 Not Found, ini bukti data sudah dihapus\n>       assert response_get.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\nAPI\\test_api_del.py:35: AssertionError","steps":[],"attachments":[{"uid":"986c4c4b5ac730e5","name":"stdout","source":"986c4c4b5ac730e5.txt","type":"text/plain","size":99}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"API"},{"name":"suite","value":"test_api_del"},{"name":"host","value":"CODE-ALPHA"},{"name":"thread","value":"28324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"API.test_api_del"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e2ad4863f6e01b4","status":"failed","statusDetails":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","time":{"start":1759820408012,"stop":1759820408979,"duration":967}},{"uid":"bb427585919d3dd9","status":"failed","statusDetails":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","time":{"start":1759820368256,"stop":1759820369251,"duration":995}},{"uid":"76d7ffa3d5992c05","status":"failed","statusDetails":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","time":{"start":1759820161431,"stop":1759820163206,"duration":1775}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"f2ddddc26f86337a.json","parameterValues":[]}