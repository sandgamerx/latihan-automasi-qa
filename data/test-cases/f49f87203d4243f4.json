{"uid":"f49f87203d4243f4","name":"Tes Fungsionalitas Kalkulator","fullName":"test_mobile_calculator#test_calculator_operations","historyId":"809142aa163795037d9cdc7989f32c00","time":{"start":1760364229177,"stop":1760364229177,"duration":0},"description":"\nSatu fungsi tes untuk menangani berbagai skenario perhitungan.\n","descriptionHtml":"<p>Satu fungsi tes untuk menangani berbagai skenario perhitungan.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Either provide 'app' option to install 'com.google.android.calculator' or consider setting 'noReset' to 'true' if 'com.google.android.calculator' is supposed to be preinstalled.\nStacktrace:\nUnknownError: Either provide 'app' option to install 'com.google.android.calculator' or consider setting 'noReset' to 'true' if 'com.google.android.calculator' is supposed to be preinstalled.\n    at getResponseForW3CError (C:\\Users\\PC\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.ts:1103:34)\n    at asyncHandler (C:\\Users\\PC\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.ts:507:57)\nThe above error is caused by\nError: Either provide 'app' option to install 'com.google.android.calculator' or consider setting 'noReset' to 'true' if 'com.google.android.calculator' is supposed to be preinstalled.\n    at AndroidUiautomator2Driver.resetAUT (C:\\Users\\PC\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-android-driver\\lib\\commands\\app-management.js:410:11)\n    at AndroidUiautomator2Driver.initAUT (C:\\Users\\PC\\.appium\\node_modules\\appium-uiautomator2-driver\\lib\\driver.ts:794:9)","statusTrace":"@pytest.fixture(scope=\"session\")\n    def driver():\n        appium_options = UiAutomator2Options()\n        appium_options.platform_name = \"Android\"\n    \n        # Ganti 'deviceName' menjadi alamat unik HP Anda\n        appium_options.udid = \"RR8NA0BFQNW\" # <-- PASTE KODE ANDA DI SINI\n    \n        appium_options.app_package = \"com.google.android.calculator\"\n        appium_options.app_activity = \"com.android.calculator2.Calculator\"\n    \n        print(\"\\n--- Menghubungkan ke Perangkat Fisik Samsung A51 ---\")\n>       appium_driver = webdriver.Remote(\"http://localhost:4723\", options=appium_options)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:249: in __init__\n    super().__init__(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:263: in __init__\n    self.start_session(capabilities)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:342: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A73B26CC20>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Either provide \\'app\\' option to install \\'com....ver.initAUT (C:\\\\\\\\Users\\\\\\\\PC\\\\\\\\.appium\\\\\\\\node_modules\\\\\\\\appium-uiautomator2-driver\\\\\\\\lib\\\\\\\\driver.ts:794:9)\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Either provide 'app' option to install 'com.google.android.calculator' or consider setting 'noReset' to 'true' if 'com.google.android.calculator' is supposed to be preinstalled.\nE       Stacktrace:\nE       UnknownError: Either provide 'app' option to install 'com.google.android.calculator' or consider setting 'noReset' to 'true' if 'com.google.android.calculator' is supposed to be preinstalled.\nE           at getResponseForW3CError (C:\\Users\\PC\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.ts:1103:34)\nE           at asyncHandler (C:\\Users\\PC\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.ts:507:57)\nE       The above error is caused by\nE       Error: Either provide 'app' option to install 'com.google.android.calculator' or consider setting 'noReset' to 'true' if 'com.google.android.calculator' is supposed to be preinstalled.\nE           at AndroidUiautomator2Driver.resetAUT (C:\\Users\\PC\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-android-driver\\lib\\commands\\app-management.js:410:11)\nE           at AndroidUiautomator2Driver.initAUT (C:\\Users\\PC\\.appium\\node_modules\\appium-uiautomator2-driver\\lib\\driver.ts:794:9)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1760364223292,"stop":1760364228952,"duration":5660},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Either provide 'app' option to install 'com.google.android.calculator' or consider setting 'noReset' to 'true' if 'com.google.android.calculator' is supposed to be preinstalled.\nStacktrace:\nUnknownError: Either provide 'app' option to install 'com.google.android.calculator' or consider setting 'noReset' to 'true' if 'com.google.android.calculator' is supposed to be preinstalled.\n    at getResponseForW3CError (C:\\Users\\PC\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.ts:1103:34)\n    at asyncHandler (C:\\Users\\PC\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.ts:507:57)\nThe above error is caused by\nError: Either provide 'app' option to install 'com.google.android.calculator' or consider setting 'noReset' to 'true' if 'com.google.android.calculator' is supposed to be preinstalled.\n    at AndroidUiautomator2Driver.resetAUT (C:\\Users\\PC\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-android-driver\\lib\\commands\\app-management.js:410:11)\n    at AndroidUiautomator2Driver.initAUT (C:\\Users\\PC\\.appium\\node_modules\\appium-uiautomator2-driver\\lib\\driver.ts:794:9)\n","statusTrace":"  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1196, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py\", line 923, in call_fixture_func\n    fixture_result = next(generator)\n  File \"C:\\Users\\PC\\Documents\\Latihan_Automasi\\conftest.py\", line 19, in driver\n    appium_driver = webdriver.Remote(\"http://localhost:4723\", options=appium_options)\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 249, in __init__\n    super().__init__(\n    ~~~~~~~~~~~~~~~~^\n        command_executor=command_executor,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<3 lines>...\n        client_config=client_config,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 263, in __init__\n    self.start_session(capabilities)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 342, in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\PC\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"suite","value":"test_mobile_calculator"},{"name":"host","value":"CODE-ALPHA"},{"name":"thread","value":"19492-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_mobile_calculator"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_result","value":"'1'"},{"name":"num1","value":"'1'"},{"name":"num2","value":"'0'"},{"name":"operator","value":"'+'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f49f87203d4243f4.json","parameterValues":["'1'","'1'","'0'","'+'"]}